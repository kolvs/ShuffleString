package com.shuffle.string

import android.widget.Toast
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.ContentCopy
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Favorite
import androidx.compose.material.icons.filled.Refresh
import androidx.compose.material3.Button
import androidx.compose.material3.HorizontalDivider
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.RadioButton
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateListOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.lifecycle.compose.LocalLifecycleOwner
import androidx.lifecycle.lifecycleScope
import kotlinx.coroutines.launch

@Composable
fun CreateShuffleStringView() {
    val context = LocalContext.current
    val lifecycleOwner = LocalLifecycleOwner.current
    val clipboardManager = LocalClipboardManager.current
    var selectedMode by remember { mutableStateOf(Mode.LOWERCASE) }
    var length by remember { mutableStateOf("6") }
    var generated by remember { mutableStateOf("") }
    val favorites = remember { mutableStateListOf<String>() }
    val favoritesDataStore = remember { FavoritesDataStore(context) }

    LaunchedEffect(Unit) {
        favoritesDataStore.favoritesFlow.collect { favoriteSet ->
            favorites.clear()
            favorites.addAll(favoriteSet)
        }
    }

    Column(modifier = Modifier.padding(16.dp)) {
        Box(modifier = Modifier.align(Alignment.CenterHorizontally)) {
            Text(
                text = stringResource(R.string.ss_app_name),
                style = MaterialTheme.typography.headlineMedium
            )
        }

        Spacer(modifier = Modifier.height(16.dp))

        // mode
        Mode.entries.forEach { mode ->
            Row(verticalAlignment = Alignment.CenterVertically) {
                RadioButton(
                    selected = selectedMode == mode,
                    onClick = { selectedMode = mode }
                )
                Text(text = stringResource(mode.label))
            }
        }

        Spacer(modifier = Modifier.height(8.dp))

        length
        OutlinedTextField(
            value = length,
            onValueChange = { if (it.all { c -> c.isDigit() }) length = it },
            label = { Text(text = stringResource(R.string.ss_length)) },
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(8.dp))

        // generate
        Button(onClick = {
            val len = length.toIntOrNull() ?: 6
            generated = generateRandomString(len, selectedMode)
        }) {
            Icon(Icons.Default.Refresh, contentDescription = null)
            Spacer(Modifier.width(8.dp))
            Text(text = stringResource(R.string.ss_generate))
        }

        Spacer(modifier = Modifier.height(16.dp))

        // result
        if (generated.isNotEmpty()) {
            Text(
                text = stringResource(R.string.ss_result),
                style = MaterialTheme.typography.titleMedium
            )
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Text(
                    text = generated,
                    style = MaterialTheme.typography.bodyLarge, fontSize = 32.sp
                )
                Row {
                    IconButton(onClick = {
                        clipboardManager.setText(AnnotatedString(generated))
                        Toast.makeText(
                            context,
                            context.getString(R.string.ss_copied),
                            Toast.LENGTH_SHORT
                        ).show()
                    }) {
                        Icon(
                            Icons.Default.ContentCopy,
                            contentDescription = stringResource(R.string.ss_copy)
                        )
                    }
                    IconButton(onClick = {
                        // clear all favorites
                        generated = ""
                        favorites.clear()
                        lifecycleOwner.lifecycleScope.launch {
                            favoritesDataStore.clearAllFavorites()
                        }
                    }) {
                        Icon(
                            Icons.Default.Delete,
                            contentDescription = stringResource(R.string.ss_delete)
                        )
                    }
                    IconButton(onClick = {
                        if (!favorites.contains(generated)) {
                            // add to favorites
                            favorites.add(generated)
                            lifecycleOwner.lifecycleScope.launch {
                                favoritesDataStore.addFavorite(generated)
                            }
                        }
                    }) {
                        Icon(
                            Icons.Default.Favorite,
                            contentDescription = stringResource(R.string.ss_favorite)
                        )
                    }
                }
            }
        }

        HorizontalDivider()

        Spacer(modifier = Modifier.height(8.dp))

        // list
        Text(
            text = stringResource(R.string.ss_favorite_list),
            style = MaterialTheme.typography.titleMedium
        )
        LazyColumn {
            items(favorites) { item ->
                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 4.dp),
                    horizontalArrangement = Arrangement.SpaceBetween
                ) {
                    Text(text = item)
                    Row {
                        IconButton(onClick = {
                            clipboardManager.setText(AnnotatedString(item))
                            Toast.makeText(
                                context,
                                context.getString(R.string.ss_copied),
                                Toast.LENGTH_SHORT
                            ).show()
                        }) {
                            Icon(
                                Icons.Default.ContentCopy,
                                contentDescription = stringResource(R.string.ss_copy)
                            )
                        }
                        IconButton(onClick = {
                            // remove
                            favorites.remove(item)
                            lifecycleOwner.lifecycleScope.launch {
                                favoritesDataStore.removeFavorite(item)
                            }
                        }) {
                            Icon(
                                Icons.Default.Delete,
                                contentDescription = stringResource(R.string.ss_delete)
                            )
                        }
                    }
                }
            }
        }
    }
}

enum class Mode(val label: Int) {
    LOWERCASE(R.string.ss_lowercase),
    UPPERCASE(R.string.ss_uppercase),
    LETTERS(R.string.ss_caps),
    NUMBERS(R.string.ss_digital),
    MIXED(R.string.ss_mix)
}

fun generateRandomString(length: Int, mode: Mode): String {
    val letters = ('A'..'Z') + ('a'..'z')
    val numbers = ('0'..'9')
    val pool: List<Char> = when (mode) {
        Mode.LOWERCASE -> letters.map { it.lowercaseChar() }
        Mode.UPPERCASE -> letters.map { it.uppercaseChar() }
        Mode.LETTERS -> letters.toList()
        Mode.NUMBERS -> numbers.toList()
        Mode.MIXED -> (letters + numbers).toList()
    }
    return (1..length).map { pool.random() }.joinToString("")
}